// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String         @id @default(cuid())
    name          String?
    email         String         @unique
    emailVerified DateTime?
    image         String?
    role          Role           @default(MEMBER)
    ownedTasks    Task[]         @relation("OwnedTasks")
    assignedTasks Task[]         @relation("AssignedTasks")
    teams         TeamsOnUsers[]
    teamsMax      Int            @default(3)
    teamsCount    Int            @default(0)

    accounts Account[]
    sessions Session[]

    bio              String?   @db.VarChar(255)
    location         String?
    phoneNumber      String?   @unique
    timezone         String?   @default("UTC")
    language         String?   @default("en")
    twoFactorEnabled Boolean   @default(false)
    lastLogin        DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    Team      Team[]

    @@index([email])
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
    @@index([userId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
    @@index([token])
}

enum Role {
    ADMIN
    MANAGER
    MEMBER
}

enum MemberRole {
    LEADER
    CONTRIBUTOR
    VIEWER
}

model Task {
    id          Int     @id @default(autoincrement())
    title       String  @db.VarChar(255)
    description String? @db.VarChar(255)
    status      Status  @default(TODO)
    owner       User    @relation("OwnedTasks", fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId     String

    assignedTo   User?     @relation("AssignedTasks", fields: [assignedToId], references: [id], onDelete: Cascade)
    assignedToId String?
    projectId    Int?
    project      Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
    teamId       Int?
    team         Team?     @relation(fields: [teamId], references: [id], onDelete: SetNull)
    calendarId   Int?
    calendar     Calendar? @relation(fields: [calendarId], references: [id], onDelete: SetNull)
    published    Boolean   @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([ownerId])
    @@index([assignedToId])
    @@index([projectId])
    @@index([teamId])
    @@index([calendarId])
}

model Team {
    id       Int            @id @default(autoincrement())
    name     String
    owner    User           @relation(fields: [ownerId], references: [id])
    ownerId  String
    users    TeamsOnUsers[]
    tasks    Task[]
    projects Project[]
    image    String         @default("https://upload.wikimedia.org/wikipedia/commons/thumb/c/c9/Microsoft_Office_Teams_%282018%E2%80%93present%29.svg/1200px-Microsoft_Office_Teams_%282018%E2%80%93present%29.svg.png")

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model TeamInvitations {
    userId     String
    teamId     Int
    assignedBy String
    role       String
    status     String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@id([userId, teamId])
    @@index([teamId])
    @@index([userId])
}

model TeamsOnUsers {
    user   User   @relation(fields: [userId], references: [id])
    userId String

    role MemberRole @default(CONTRIBUTOR)

    team   Team @relation(fields: [teamId], references: [id])
    teamId Int

    assignedAt DateTime @default(now())
    assignedBy String

    @@id([userId, teamId])
}

enum Status {
    TODO
    IN_PROGRESS
    DONE
    BLOCKED
}

model Project {
    id     Int    @id @default(autoincrement())
    name   String
    tasks  Task[]
    teamId Int?
    team   Team?  @relation(fields: [teamId], references: [id], onDelete: SetNull)

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())

    @@index([teamId])
}

model Calendar {
    id    Int    @id @default(autoincrement())
    name  String
    tasks Task[]

    createdAt DateTime @default(now())
    updatedAt DateTime @default(now())
}
