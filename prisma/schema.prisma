// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  tasks         Task[]
  teamId        Int?
  team          Team?     @relation(fields: [teamId], references: [id], onDelete: SetNull)

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@index([token])
}

enum Role {
  USER
  ADMIN
}

model Task {
  id         Int      @id @default(autoincrement())
  title      String   @db.VarChar(255)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  published  Boolean  @default(false)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  projectId  Int?
  project    Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  teamId     Int?
  team       Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)
  calendarId Int?
  calendar   Calendar? @relation(fields: [calendarId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([projectId])
  @@index([teamId])
  @@index([calendarId])
}

model Project {
  id        Int      @id @default(autoincrement())
  name      String
  tasks     Task[]
  teamId    Int?
  team      Team?    @relation(fields: [teamId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([teamId])
}

model Calendar {
  id        Int      @id @default(autoincrement())
  name      String
  tasks     Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String
  users     User[]
  tasks     Task[]
  projects  Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}